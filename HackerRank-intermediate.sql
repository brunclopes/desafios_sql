SELECT 
ROUND(MEDIAN(LAT_N), 4)  
FROM 
STATION

SELECT N,
CASE
   WHEN P IS NULL THEN 'Root'
   WHEN (SELECT COUNT(*) FROM BST WHERE B.N=P)>0 THEN 'Inner'
   ELSE 'Leaf'
END AS PLACE
FROM BST B
ORDER BY N;


SELECT CASE 
    WHEN GRADES.GRADE < 8 THEN 'NULL' 
    ELSE STUDENTS.NAME 
    END 
, GRADES.GRADE, STUDENTS.MARKS 
FROM STUDENTS, GRADES 
WHERE STUDENTS.MARKS >= GRADES.MIN_MARK AND STUDENTS.MARKS <= GRADES.MAX_MARK 
ORDER BY GRADES.GRADE DESC, STUDENTS.NAME;


SELECT H.HACKER_ID, H.NAME FROM SUBMISSIONS AS S JOIN HACKERS AS H 
ON S.HACKER_ID = H.HACKER_ID 
JOIN CHALLENGES AS C ON S.CHALLENGE_ID = C.CHALLENGE_ID
JOIN DIFFICULTY AS D ON C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL
WHERE S.SCORE = D.SCORE 
GROUP BY H.HACKER_ID, H.NAME 
HAVING COUNT(*) > 1
ORDER BY COUNT(*) DESC, H.HACKER_ID;


SELECT W.ID, P.AGE, W.COINS_NEEDED, W.POWER FROM WANDS AS W 
JOIN WANDS_PROPERTY AS P
ON W.CODE = P.CODE
WHERE W.COINS_NEEDED = (SELECT MIN(COINS_NEEDED)
                       FROM WANDS W2 INNER JOIN WANDS_PROPERTY P2 
                       ON W2.CODE = P2.CODE 
                       WHERE P2.IS_EVIL = 0 AND P.AGE = P2.AGE AND W.POWER = W2.POWER)
ORDER BY W.POWER DESC, P.AGE DESC;


SELECT C.HACKER_ID, H.NAME, COUNT(C.CHALLENGE_ID) AS CNT 
FROM HACKERS AS H JOIN CHALLENGES AS C ON H.HACKER_ID = C.HACKER_ID
GROUP BY C.HACKER_ID, H.NAME 
HAVING CNT = (SELECT COUNT(C1.CHALLENGE_ID) FROM CHALLENGES AS C1 GROUP BY C1.HACKER_ID 
              ORDER BY COUNT(*) DESC LIMIT 1) OR
CNT NOT IN (SELECT COUNT(C2.CHALLENGE_ID) FROM CHALLENGES AS C2 GROUP BY C2.HACKER_ID 
            HAVING C2.HACKER_ID <> C.HACKER_ID)
ORDER BY CNT DESC, C.HACKER_ID;



SELECT M.HACKER_ID, H.NAME, SUM(SCORE) AS TOTAL_SCORE FROM
(SELECT HACKER_ID, CHALLENGE_ID, MAX(SCORE) AS SCORE
FROM SUBMISSIONS GROUP BY HACKER_ID, CHALLENGE_ID) AS M
JOIN HACKERS AS H
ON M.HACKER_ID = H.HACKER_ID
GROUP BY M.HACKER_ID, H.NAME
HAVING TOTAL_SCORE > 0
ORDER BY TOTAL_SCORE DESC, M.HACKER_ID;


SELECT START_DATE, MIN(END_DATE)
FROM
  (SELECT START_DATE
   FROM PROJECTS
   WHERE START_DATE NOT IN
       (SELECT END_DATE
        FROM PROJECTS)) A,
  (SELECT END_DATE
   FROM PROJECTS
   WHERE END_DATE NOT IN
       (SELECT START_DATE
        FROM PROJECTS)) B
WHERE START_DATE < END_DATE
GROUP BY START_DATE
ORDER BY (MIN(END_DATE) - START_DATE), START_DATE;


SELECT S.NAME FROM STUDENTS S
JOIN FRIENDS F ON S.ID=F.ID
JOIN PACKAGES STUDENT_SALARY ON S.ID=STUDENT_SALARY.ID
JOIN PACKAGES FRIEND_SALARY ON F.FRIEND_ID=FRIEND_SALARY.ID

WHERE FRIEND_SALARY.SALARY>STUDENT_SALARY.SALARY
ORDER BY FRIEND_SALARY.SALARY


SELECT F1.X, F1.Y FROM FUNCTIONS AS F1 
WHERE F1.X = F1.Y AND
(SELECT COUNT(*) FROM FUNCTIONS WHERE X = F1.X AND Y = F1.Y) > 1
UNION
SELECT F1.X, F1.Y FROM FUNCTIONS AS F1
WHERE EXISTS(SELECT X, Y FROM FUNCTIONS WHERE F1.X = Y AND F1.Y = X AND F1.X < X)
ORDER BY X;


SELECT CON.CONTEST_ID,
        CON.HACKER_ID, 
        CON.NAME, 
        SUM(TOTAL_SUBMISSIONS), 
        SUM(TOTAL_ACCEPTED_SUBMISSIONS), 
        SUM(TOTAL_VIEWS), SUM(TOTAL_UNIQUE_VIEWS)
FROM CONTESTS CON 
JOIN COLLEGES COL ON CON.CONTEST_ID = COL.CONTEST_ID 
JOIN CHALLENGES CHA ON  COL.COLLEGE_ID = CHA.COLLEGE_ID 
LEFT JOIN
(SELECT CHALLENGE_ID, SUM(TOTAL_VIEWS) AS TOTAL_VIEWS, SUM(TOTAL_UNIQUE_VIEWS) AS TOTAL_UNIQUE_VIEWS
FROM VIEW_STATS GROUP BY CHALLENGE_ID) VS ON CHA.CHALLENGE_ID = VS.CHALLENGE_ID 
LEFT JOIN
(SELECT CHALLENGE_ID, SUM(TOTAL_SUBMISSIONS) AS TOTAL_SUBMISSIONS, SUM(TOTAL_ACCEPTED_SUBMISSIONS) AS TOTAL_ACCEPTED_SUBMISSIONS FROM SUBMISSION_STATS GROUP BY CHALLENGE_ID) SS ON CHA.CHALLENGE_ID = SS.CHALLENGE_ID
    GROUP BY CON.CONTEST_ID, CON.HACKER_ID, CON.NAME
        HAVING SUM(TOTAL_SUBMISSIONS)!=0 OR 
                SUM(TOTAL_ACCEPTED_SUBMISSIONS)!=0 OR
                SUM(TOTAL_VIEWS)!=0 OR
                SUM(TOTAL_UNIQUE_VIEWS)!=0

            ORDER BY CONTEST_ID;



SET NOCOUNT ON;


GO


SELECT 
P.SKU,
P.PRODUCT_NAME
FROM PRODUCT P
LEFT JOIN INVOICE_ITEM AS I
ON I.PRODUCT_ID = P.ID
WHERE I.INVOICE_ID IS NULL
ORDER BY P.SKU ASC


SELECT
    CUSTOMER.CUSTOMER_NAME,
    CAST(INVOICE.TOTAL_PRICE AS DECIMAL(10,6))AMOUNT
FROM
    CUSTOMER
INNER JOIN INVOICE ON
    INVOICE.CUSTOMER_ID = CUSTOMER.ID
WHERE
    INVOICE.TOTAL_PRICE <=(
    SELECT
        (0.25 * AVG(INVOICE.TOTAL_PRICE))
    FROM
        INVOICE)
GROUP BY
    CUSTOMER_NAME,
    TOTAL_PRICE